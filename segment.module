<?php

/**
 * @file
 * Segment Integration
 */

/**
 * Implements hook_permission().
 */
function segment_permission() {
  return array(
    'administer segment' => array(
      'title' => t('Administer Segment Integration'),
      'description' => t('Perform maintenance tasks for Segment.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function segment_menu() {
  $items['admin/config/system/segment'] = array(
    'title' => 'Segment Configuration',
    'description' => 'Configure <a href="https://segment.com/docs/libraries/analytics.js/" target="_blank"><b>Segment</b></a> tracking behavior for your website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('segment_admin_settings_form'),
    'access arguments' => array('administer segment'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function segment_page_alter(&$page) {

  // Disable tracking for visitors who have opted out via DNT header.
  if (variable_get('segment_privacy', 1) && !empty($_SERVER['HTTP_DNT'])) {
    return;
  }

  $write_key = variable_get('segment_write_key', '');
  if (!empty($write_key)) {
    // Minified code from https://segment.com/docs/libraries/analytics.js/quickstart/#step-1-copy-the-snippet
    $script = '!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.1.0";';
    // Include configured write key.
    $script .= 'analytics.load(' . drupal_json_encode($write_key) . ');';
    $script .= 'analytics.page()';
    $script .= '}}();';

    drupal_add_js($script, array('scope' => 'header', 'type' => 'inline'));
  }
}

/**
 * Implements hook_admin_settings().
 */
function segment_admin_settings_form($form_state) {
  $form['segment_write_key'] = array(
    '#title' => t('Write Key'),
    '#type' => 'textfield',
    '#default_value' => variable_get('segment_write_key', ''),
    '#size' => 200,
    '#maxlength' => 200,
    '#required' => TRUE,
    '#description' => t('This Write Key is unique to each Project you have configured in <a href="@segment">Segment.io</a>. To get a Write Key, <a href="@analyticsjs">register your Project with Segment.io</a>, or if you already have registered your site, go to your Segment.io Project Settings page.analyticsjs will use this write key to send data to your project.', array('@segment' => 'https://segment.com/login', '@analyticsjs' => 'https://segment.com/login')),
  );

  $form['segment_privacy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Universal web tracking opt-out'),
    '#description' => t('If enabled and your server receives the <a href="@donottrack">Do-Not-Track</a> header from the client browser, the segment module will not embed any tracking code into your site. This feature is currently limited to logged in users and disabled page caching.', array('@donottrack' => 'http://donottrack.us/')),
    '#default_value' => variable_get('segment_privacy', 1),
  );

  $form['segment_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable debugging'),
    '#description' => t('Turn on debugging in Analytics.js'),
    '#default_value' => variable_get('segment_debug', 1),
  );

  return system_settings_form($form);
}

/**
 * Simple wrapper to send requests to Segment using the PHP library.
 *
 * @param string $method
 *  Method from
 * @param null|array $message
 *  Array of data to pass to the method.
 */
function segment_php_send($method, $message = NULL) {

  $library = libraries_load('segment');
  if (!$library['loaded']) {
    watchdog('segment', 'Error loading library', WATCHDOG_ERROR);
    return;
  }

  Segment::$method($message);
}

/**
 * Implements hook_libraries_info().
 */
function segment_libraries_info() {
  $libraries['segment'] = array(
    'name' => 'Segment PHP',
    'vendor url' => 'https://segment.com/docs/libraries/php/',
    'download url' => 'https://github.com/segmentio/analytics-php/archive/1.2.1.tar.gz',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'VERSION',
      // 1.2.1
      'pattern' => '/((\d+)\.(\d+)\.(\d+))/',
    ),
    'files' => array(
      'php' => array('Segment.php'),
    ),
    // Optionally register callbacks to apply to the library during different
    // stages of its lifetime ('callback groups').
    'callbacks' => array(
      // Called after the library is loaded.
      'post-load' => array(
        'segment_library_post_load',
      ),
    ),
  );

  return $libraries;
}

/**
 * Libraries API post-load callback used to initialize Segment.
 */
function segment_library_post_load() {
  $options = array(
    'debug' => variable_get('segment_debug', FALSE),
    'error_handler' => function ($code, $msg) { segment_php_log_error($code, $msg); }
  );

  // @TODO allow for other init options.

  Segment::init(variable_get('segment_write_key', ''), $options);
}

/**
 * Error message handler to pass errors to watchdog.
 *
 * @param $code
 * @param $msg
 */
function segment_php_log_error($code, $msg) {
  // @TODO set severity based on code, if the codes are useful.
  watchdog('segment', 'Code: @code. @msg', array('@code' => $code, '@msg' => $msg), WATCHDOG_ERROR);
}

/**
 * Helper method to add EITHER the logged in user's id OR the anonymousId from
 * the cookie created by analytics.js
 *
 * @param $msg
 */
function segment_php_add_userid(&$msg) {
  global $user;
  if ($user->uid > 0) {
    $msg['userId'] = $user->uid;
  }
  else {
    $anonymous_id = drupal_json_decode(filter_input(INPUT_COOKIE, 'ajs_anonymous_id'));
    if (empty($anonymous_id)) {
      $anonymous_id = drupal_random_key();
    }
    $msg['anonymousId'] = $anonymous_id;
  }
}